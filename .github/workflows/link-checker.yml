name: Link Checker & Cross-Repository Sync

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
  push:
    paths:
      - '**/*.md'
      - '**/*.yml'
      - '**/*.yaml'

jobs:
  check-internal-links:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install link checker
      run: |
        pip install requests beautifulsoup4 markdown

    - name: Check internal repository links
      run: |
        python scripts/check_internal_links.py \
          --base-dir . \
          --output link-check-results.json

    - name: Check cross-repository links
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python scripts/check_cross_repo_links.py \
          --repos "agenticallysh/agentic-framework-migration-guides,agenticallysh/agent-framework-benchmarks,agenticallysh/production-agent-templates,agenticallysh/framework-cost-calculator,agenticallysh/weekly-agent-updates" \
          --output cross-repo-links.json

    - name: Upload link check results
      uses: actions/upload-artifact@v3
      with:
        name: link-check-results
        path: |
          link-check-results.json
          cross-repo-links.json

    - name: Create issue for broken links
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          let issueBody = '# 🔗 Broken Links Detected\n\n';
          
          try {
            const results = JSON.parse(fs.readFileSync('link-check-results.json', 'utf8'));
            if (results.broken_links.length > 0) {
              issueBody += '## Internal Links\n';
              results.broken_links.forEach(link => {
                issueBody += `- [ ] \`${link.file}\`: [${link.url}](${link.url}) - ${link.error}\n`;
              });
            }
          } catch (e) {
            console.log('No internal link results found');
          }
          
          try {
            const crossResults = JSON.parse(fs.readFileSync('cross-repo-links.json', 'utf8'));
            if (crossResults.broken_links.length > 0) {
              issueBody += '\n## Cross-Repository Links\n';
              crossResults.broken_links.forEach(link => {
                issueBody += `- [ ] \`${link.file}\`: [${link.url}](${link.url}) - ${link.error}\n`;
              });
            }
          } catch (e) {
            console.log('No cross-repo link results found');
          }
          
          issueBody += '\n## Action Required\n';
          issueBody += 'Please review and fix the broken links above.\n';
          issueBody += '\n---\n';
          issueBody += '*This issue was automatically created by the link checker workflow.*';
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `🔗 Broken Links Detected - ${new Date().toISOString().split('T')[0]}`,
            body: issueBody,
            labels: ['maintenance', 'documentation']
          });

  sync-repository-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout main repository
      uses: actions/checkout@v4
      with:
        path: main-repo

    - name: Checkout related repositories
      run: |
        # Clone all related repositories
        git clone https://github.com/agenticallysh/agentic-framework-migration-guides.git migration-guides
        git clone https://github.com/agenticallysh/agent-framework-benchmarks.git benchmarks
        git clone https://github.com/agenticallysh/production-agent-templates.git templates
        git clone https://github.com/agenticallysh/framework-cost-calculator.git cost-calculator
        git clone https://github.com/agenticallysh/weekly-agent-updates.git updates

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install sync dependencies
      run: |
        pip install pyyaml requests jinja2

    - name: Sync framework metadata
      run: |
        cd main-repo
        python scripts/sync_framework_metadata.py \
          --repos "../migration-guides,../benchmarks,../templates,../cost-calculator,../updates" \
          --output framework-metadata.json

    - name: Update cross-references
      run: |
        cd main-repo
        python scripts/update_cross_references.py \
          --metadata framework-metadata.json \
          --repos "../migration-guides,../benchmarks,../templates,../cost-calculator,../updates"

    - name: Commit changes to related repositories
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Function to commit and push changes
        commit_repo() {
          local repo_dir=$1
          local repo_name=$2
          
          cd "$repo_dir"
          git config --local user.email "hello@agentically.sh"
          git config --local user.name "Agentically Sync Bot"
          
          if [[ -n $(git status --porcelain) ]]; then
            git add .
            git commit -m "🔄 Auto-sync: Update cross-repository references"
            git push https://x-access-token:${GITHUB_TOKEN}@github.com/agenticallysh/${repo_name}.git
          fi
          cd ..
        }
        
        # Commit changes to each repository
        commit_repo "migration-guides" "agentic-framework-migration-guides"
        commit_repo "benchmarks" "agent-framework-benchmarks"
        commit_repo "templates" "production-agent-templates"
        commit_repo "cost-calculator" "framework-cost-calculator"
        commit_repo "updates" "weekly-agent-updates"

  validate-agentically-links:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Validate Agentically.sh links
      run: |
        # Extract all agentically.sh links from markdown files
        grep -r "https://www.agentically.sh" . --include="*.md" > agentically_links.txt || true
        
        # Check if links follow the expected pattern
        python - << 'EOF'
        import re
        import sys
        
        expected_patterns = [
          r'https://www\.agentically\.sh/ai-agentic-frameworks/',
          r'https://www\.agentically\.sh/subscribe/',
          r'https://www\.agentically\.sh/$'
        ]
        
        issues = []
        
        with open('agentically_links.txt', 'r') as f:
          for line in f:
            if ':' in line:
              file_path, url_line = line.split(':', 1)
              urls = re.findall(r'https://www\.agentically\.sh[^\s\)]+', url_line)
              
              for url in urls:
                is_valid = any(re.match(pattern, url) for pattern in expected_patterns)
                if not is_valid:
                  issues.append(f"{file_path}: {url}")
        
        if issues:
          print("⚠️ Invalid Agentically.sh links found:")
          for issue in issues:
            print(f"  - {issue}")
          print("\nAll Agentically.sh links should follow the pattern:")
          print("  https://www.agentically.sh/ai-agentic-frameworks/...")
          sys.exit(1)
        else:
          print("✅ All Agentically.sh links follow the expected patterns")
        EOF

    - name: Check link consistency across repositories
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python - << 'EOF'
        import requests
        import json
        import os
        
        # Get all Agentically links from this repository
        import subprocess
        result = subprocess.run(['grep', '-r', 'https://www.agentically.sh', '.', '--include=*.md'], 
                              capture_output=True, text=True)
        
        local_links = set()
        for line in result.stdout.split('\n'):
          if ':' in line:
            import re
            urls = re.findall(r'https://www\.agentically\.sh[^\s\)]+', line)
            local_links.update(urls)
        
        print(f"Found {len(local_links)} unique Agentically.sh links in this repository")
        
        # Save for potential future validation
        with open('agentically_links_inventory.json', 'w') as f:
          json.dump(sorted(list(local_links)), f, indent=2)
        
        print("✅ Link inventory created")
        EOF

    - name: Upload link inventory
      uses: actions/upload-artifact@v3
      with:
        name: link-inventory
        path: agentically_links_inventory.json